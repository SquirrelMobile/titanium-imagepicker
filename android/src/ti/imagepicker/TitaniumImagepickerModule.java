/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.imagepicker;

import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBaseActivity;
import org.appcelerator.titanium.TiLifecycle.OnInstanceStateEvent;
import org.appcelerator.titanium.TiLifecycle.OnActivityResultEvent;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.TiBlob;

import android.app.Activity;
import android.os.Bundle;
import android.content.Intent;
import android.net.Uri;
import android.provider.MediaStore;
import android.graphics.Bitmap;

import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.io.FileNotFoundException;
import java.io.IOException;

import com.zhihu.matisse.Matisse;
import com.zhihu.matisse.MimeType;
import com.zhihu.matisse.engine.impl.PicassoEngine;

@Kroll.module(name="TitaniumImagepicker", id="ti.imagepicker")
public class TitaniumImagepickerModule extends KrollModule implements TiActivityResultHandler
{
	// Standard Debugging variables
	private static final String LCAT = "TitaniumImagepickerModule";
	private static final boolean DBG = TiConfig.LOGD;

	int REQUEST_CODE_SUCCESS = 1;

	private KrollFunction callback;
	protected int requestCode;

	@Kroll.method(runOnUiThread = true)
	public void openGallery(KrollDict args)
	{
		callback = (KrollFunction) args.get("callback");

		Activity activity = TiApplication.getInstance().getCurrentActivity();
		TiActivitySupport support = (TiActivitySupport) activity;
		requestCode = support.getUniqueResultCode();

		int maxImageSelection = args.optInt("maxImageSelection", 3);
		
		Intent matisseIntent = new Intent(activity, TiMatisseActivity.class);
		matisseIntent.putExtra(TiMatisseActivity.PROPERTY_MAX_IMAGE_SELECTION, maxImageSelection);
		
		support.launchActivityForResult(matisseIntent, requestCode, this);
	}

	@Override
	public void onResult(Activity activity, int thisRequestCode, int resultCode, Intent data)
	{
		if (callback == null) return;

		if (thisRequestCode == requestCode && data != null) {
			Log.d(LCAT, "Uris: " + Matisse.obtainResult(data));
			Log.d(LCAT, "Paths: " + Matisse.obtainPathResult(data));

			List<Uri> result = Matisse.obtainResult(data);
			ArrayList<TiBlob> images = new ArrayList<TiBlob>();

			for (int i = 0; i < result.size(); i++) {
				try {
					Bitmap bitmap = MediaStore.Images.Media.getBitmap(TiApplication.getInstance().getContentResolver(), result.get(i));
					TiBlob blob = TiBlob.blobFromImage(bitmap);
					images.add(blob);
				} catch (FileNotFoundException ex) {
					Log.e(LCAT, "Cannot find file: " + result.get(i).toString());
				} catch (IOException ex) {
					Log.e(LCAT, "Cannot access file: " + result.get(i).toString());
				}
			}	

			KrollDict event = new KrollDict();
			event.put("success", true);
			event.put("images", images.toArray());

			callback.callAsync(getKrollObject(), event);
		} else {
			KrollDict event = new KrollDict();
			event.put("success", false);
			event.put("cancel", true);
			callback.callAsync(getKrollObject(), event);	
		}
	}

	@Override
	public void onError(Activity activity, int requestCode, Exception e)
	{
		if (callback == null) return;

		KrollDict event = new KrollDict();
		event.put("success", false);
		callback.callAsync(getKrollObject(), event);
	}
	
}

